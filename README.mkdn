# Thredded [![Code Climate](https://codeclimate.com/github/thredded/thredded/badges/gpa.svg)](https://codeclimate.com/github/thredded/thredded) [![Travis-CI](https://api.travis-ci.org/thredded/thredded.svg?branch=master)](https://travis-ci.org/thredded/thredded/) [![Test Coverage](https://codeclimate.com/github/thredded/thredded/badges/coverage.svg)](https://codeclimate.com/github/thredded/thredded/coverage) [![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/thredded/thredded?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

_Thredded_ is a Rails 4+ forum/messageboard engine. Its goal is to be as
simple and feature rich as possible.

If you're looking for variations on a theme - see [Discourse], [Forem],
[Tectura] or [Heterotic Beast]. The last two are forks from Rick Olsen
and Courtenay's [Altered Beast]. Of those it should be noted that Forem
is an engine - not a standalone app.

<a href='https://pledgie.com/campaigns/27480'><img alt='Click here to lend your support to: Thredded and make a donation at pledgie.com !' src='https://pledgie.com/campaigns/27480.png?skin_name=chrome' border='0' ></a>

<img src="http://emoji.fileformat.info/gemoji/point_up.png" width="24"> If you are so inclined, donating to the project will help aid in its development

[Discourse]: http://www.discourse.org/
[Forem]: https://www.github.com/radar/forem
[Tectura]: https://github.com/caelum/tectura
[Heterotic Beast]: https://github.com/distler/heterotic_beast
[Altered Beast]: https://www.github.com/courtenay/altered_beast

Currently only MRI Ruby 2.2+ is supported. We would love to support JRuby and Rubinius as well.

## Installation

Add the gem to your Gemfile:

```ruby
gem 'thredded', github: 'thredded/thredded'
```

Add the Thredded [initializer] to your parent app by running the install generator.

```console
rails generate thredded:install
```

Copy the migrations over to your parent application and migrate:

```console
rake thredded:install:migrations db:migrate db:test:prepare
```

Mount the thredded engine in your routes file:

```ruby
mount Thredded::Engine => '/forum'
```

Add thredded styles to your `application.scss` (see below for customizing the styles):

```scss
@import "thredded";
```

Include thredded JavaScripts in your `application.js`:

```js
//= require thredded
```

[initializer]: https://github.com/thredded/thredded/blob/master/lib/generators/thredded/install/templates/initializer.rb


## Background Job Requirements

This gem has several gem agnostic background jobs. Currently resque, sidekiq, delayed_job, and a threaded in-memory queue are supported thanks to [Richard Schneeman's Q gem](https://github.com/schneems/Q). The configuration detailed above allows you to specify which job queue you prefer with `Thredded.queue_backend`. The available options are one of the following symbols - `:threaded_in_memory_queue`, `:sidekiq`, `:resque`, or `:delayed_job`.

When using the threaded in-memory queue you may *optionally* update its log-level for more granular debugging with the `Thredded.queue_memory_log_level` setting.

When running the app in a test environment you may want to set your queue to run the jobs inline. In your config you may want to set the option based on environment. EG:

```ruby
Thredded.queue_inline = Rails.env.test?
```

## Get Your Parent App Ready

There are a few things you need in your app to get things looking just right.

1. Add `to_s` and `to_param` methods to your user model. The following example assumes
that there is a column in my user model called `name`:

  ```ruby
  class User < ActiveRecord::Base
    def to_s
      name
    end

    def to_param
      id # or `to_s.parameterize` if you'd like a slug
    end
  end
  ```

2. Make you, or one of your users, a super-admin so they'll have the permissions to create a new forum.

  ```
  rake thredded:superadmin[yourusername] # bash
  rake "thredded:superadmin[yourusername]" # zsh
  ```

  Two examples are given for bash and zsh. Zsh typically reserves brackets,
  `[]`, for other uses hence the wrapping with quotes. Pro-tip: did you know
  [you can escape the brackets by default](http://kinopyo.com/blog/escape-square-bracket-by-default-in-zsh/)?


## Theming

The engine comes by default with a light and effective implementation of the
views, styles, and javascript. Once you mount the engine you will be presented
with a "themed" version of thredded.

### Styles

Thredded comes with a light Sass theme controlled by a handful of variables that can be found here:
https://github.com/thredded/thredded/blob/master/app/assets/stylesheets/thredded/base/_variables.scss.

To override the styles, override the variables *before* importing Thredded styles, e.g.:

```scss
// application.scss
$thredded-brand: #9c27b0;
@import "thredded";
```

The `@import "thredded"` directive above will import thredded styles and the [dependencies][thredded-scss-dependencies] 
(currently just "select2" from [select2-rails]). If you already include your own styles for any of thredded
dependencies, you can import just the thredded styles alone like this:

```scss
// application.scss
@import "thredded/thredded";
```

If you are writing a Thredded plugin, import the [`thredded/base`][thredded-scss-base] Sass package instead.
The `base` package only defines variables, mixins, and %-placeholders, so it can be imported safely without producing
any duplicate CSS.

[thredded-scss-dependencies]: https://github.com/thredded/thredded/blob/master/app/assets/stylesheets/thredded/_dependencies.scss
[select2-rails]: https://github.com/argerim/select2-rails
[thredded-scss-base]: https://github.com/thredded/thredded/blob/master/app/assets/stylesheets/thredded/_base.scss

### Views and other assets

By default, thredded renders in its own layout, but you can easily override this by setting `Thredded.layout` in the
initializer.

You can also override any views and assets by placing them in the same path in your application as they are in the gem.
This uses the [standard Rails mechanism](http://guides.rubyonrails.org/engines.html#overriding-views) for overriding
engine views. For example, to copy the post view for customization:

```bash
# Copy the post view into the application to customize it:
mkdir -p app/views/thredded/posts && cp "$(bundle show thredded)/$_/_post.html.erb" "$_"
```

**NB:** Overriding the views like this means that on every update of the thredded gem you have to check that your
customizations are still compatible with the new version of thredded. This is difficult and error-prone.
Whenever possible, use the styles and i18n to customize Thredded to your needs.

A couple of notes:

* When using route helpers in the thredded views -- eg: `new_session_path`, et
  al -- make sure to prepend `main_app` to the helper:
  `main_app.new_session_path` as rails engines like thredded will not know about
  those routes' existence unless explicitly told so.
* The theme layout has three content_tags available to yield -
  `:thredded_page_title`, `:thredded_page_id`, and `:thredded_javascript`. The
  views within thredded pass those up through to your layout if you would like
  to use them.

## Gem development dependencies

To be more clear - these are some dependencies for when you are working on
*this* gem. Not for when you are implementing it into your Rails app.

* PostgreSQL & MySQL - `brew install postgres mysql`

Then, create the `thredded` database users for both MySQL and Postgres. Optional
ENV's you can use are to specify the db's - `DB=postgresql` or `DB=mysql2` - or
the user account that postgresql is running as - `PG_DAEMON_USER=$(whoami)`.

```console
$ [DB=postgresql|mysql2] [PG_DAEMON_USER=$(whoami)] script/create-db-users
```

If and when you generate new migrations for thredded there will be three
database migrations and one schema dump you will want to run.

1. `DB=mysql2 bundle exec rake db:drop db:create db:migrate`
2. `DB=postgresql bundle exec rake db:drop db:create db:migrate`
3. `RAILS_ENV=test bundle exec rake db:drop db:create db:migrate`
4. `bundle exec rake db:schema:dump`

The first two, in the steps above, are to generate the db schemas for both
postgres and mysql, the third is to migrate your local test database, and the
last is to take that schema information and save it to the two schema files
(for when it tests against PG and MySql).

*Or*, use the included script (it's got all that good stuff in it)

```console
$ script/migrate
```

Finally, run the development server with either `DB=postgresql` or `DB=mysql2`:

```console
$ DB=postgresql rake dev:server
```

## Developing and Testing with [Docker Compose](http://docs.docker.com/compose/)

To quickly try out _Thredded_ with the included dummy app, clone the source and
start the included docker-compose.yml file with:

```
docker-compose build
docker-compose up -d
```

The above will build and run everything, daemonized, resulting in a running
instance on port 9292. Running `docker-compose logs` will let you know when
everything is up and running. Editing the source on your host machine will
be reflected in the running docker'ized application.

Note that when using [boot2docker](https://github.com/boot2docker/boot2docker)
on a Mac make sure you visit the boot2docker host ip at
`http://$(boot2docker ip):9292`.

After booting up the containers you can run the test suite with the following:

```console
docker-compose run web bundle exec rake
```

